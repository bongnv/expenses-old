// Code generated by gokit v0.0.1. DO NOT EDIT.

package storage

import (
	"context"

	"github.com/bongnv/gokit/util/entity/query"
	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql" // initialize mysql
)

type ExpenseDAO interface {
	Create(context.Context, *Expense) error
	Query(context.Context, ...query.Query) ([]*Expense, error)
	Update(context.Context, *Expense) error
	Delete(context.Context, *Expense) error
}

// NewExpenseDAO opens connections to DB via the given DSN. It returns an DAO to access the database.
func NewExpenseDAO(db *gorm.DB) ExpenseDAO {
	return &implExpenseDAO{
		db: db,
	}
}

type implExpenseDAO struct {
	db *gorm.DB
}

func (i *implExpenseDAO) Create(_ context.Context, entity *Expense) error {
	result := i.db.Create(entity)
	return result.Error
}

func (i *implExpenseDAO) Query(_ context.Context, queries ...query.Query) ([]*Expense, error) {
	var results []*Expense
	result := query.Transform(i.db, queries...).Find(&results)
	return results, result.Error
}

func (i *implExpenseDAO) Update(_ context.Context, entity *Expense) error {
	result := i.db.Save(entity)
	return result.Error
}

func (i *implExpenseDAO) Delete(_ context.Context, entity *Expense) error {
	result := i.db.Delete(entity)
	return result.Error
}
