// Code generated by gokit v0.0.1. DO NOT EDIT.

package expenseservice

import (
	"context"

	"github.com/bongnv/expenses"
	"github.com/go-kit/kit/endpoint"
)

// endpoints ...
type endpoints struct {
	GetEndpoint    endpoint.Endpoint
	ListEndpoint   endpoint.Endpoint
	CreateEndpoint endpoint.Endpoint
	UpdateEndpoint endpoint.Endpoint
	DeleteEndpoint endpoint.Endpoint
}

// makeEndpoints returns an Endpoints struct where each endpoint invokes
// the corresponding method on the provided service.
func makeEndpoints(s expenses.ExpenseService) endpoints {
	return endpoints{
		GetEndpoint:    makeGetEndpoint(s),
		ListEndpoint:   makeListEndpoint(s),
		CreateEndpoint: makeCreateEndpoint(s),
		UpdateEndpoint: makeUpdateEndpoint(s),
		DeleteEndpoint: makeDeleteEndpoint(s),
	}
}

// makeEndpoint returns an endpoint via the passed service.
func makeGetEndpoint(s expenses.ExpenseService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var (
			resp interface{}
			err  error
		)

		req := request.(*expenses.GetExpenseRequest)
		resp, err = s.Get(ctx, req)

		return resp, err
	}
}

// makeEndpoint returns an endpoint via the passed service.
func makeListEndpoint(s expenses.ExpenseService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var (
			resp interface{}
			err  error
		)

		req := request.(*expenses.ListExpenseRequest)
		resp, err = s.List(ctx, req)

		return resp, err
	}
}

// makeEndpoint returns an endpoint via the passed service.
func makeCreateEndpoint(s expenses.ExpenseService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var (
			resp interface{}
			err  error
		)

		req := request.(*expenses.CreateExpenseRequest)
		resp, err = s.Create(ctx, req)

		return resp, err
	}
}

// makeEndpoint returns an endpoint via the passed service.
func makeUpdateEndpoint(s expenses.ExpenseService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var (
			resp interface{}
			err  error
		)

		req := request.(*expenses.UpdateExpenseRequest)
		resp, err = s.Update(ctx, req)

		return resp, err
	}
}

// makeEndpoint returns an endpoint via the passed service.
func makeDeleteEndpoint(s expenses.ExpenseService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var (
			resp interface{}
			err  error
		)

		req := request.(*expenses.DeleteExpenseRequest)
		err = s.Delete(ctx, req)

		return resp, err
	}
}
