// Code generated by gokit v0.0.1. DO NOT EDIT.

package expenseservice

import (
	"context"
	"encoding/json"
	"io"
	"net/http"

	"github.com/bongnv/expenses"
	"github.com/bongnv/gokit/util/httputil"
	"github.com/bongnv/gokit/util/server"
)

// GetOptions ...
func GetOptions(s expenses.ExpenseService) []server.Option {
	serverEndpoints := makeEndpoints(s)

	opts := []server.Option{}

	opts = append(opts, getHTTPOptions(serverEndpoints)...)

	return opts
}

func getHTTPOptions(serverEndpoints endpoints) []server.Option {
	opts := []server.Option{}

	opts = append(opts,
		server.WithHTTPEndpoint(server.Endpoint{
			Method:         "GET",
			Path:           "/expenses/{ID}",
			Endpoint:       serverEndpoints.GetEndpoint,
			RequestDecoder: decodeGetRequest,
		}),
		server.WithHTTPEndpoint(server.Endpoint{
			Method:         "GET",
			Path:           "/expenses",
			Endpoint:       serverEndpoints.ListEndpoint,
			RequestDecoder: decodeListRequest,
		}),
		server.WithHTTPEndpoint(server.Endpoint{
			Method:         "POST",
			Path:           "/expenses",
			Endpoint:       serverEndpoints.CreateEndpoint,
			RequestDecoder: decodeCreateRequest,
		}),
		server.WithHTTPEndpoint(server.Endpoint{
			Method:         "PUT",
			Path:           "/expenses/{ID}",
			Endpoint:       serverEndpoints.UpdateEndpoint,
			RequestDecoder: decodeUpdateRequest,
		}),
		server.WithHTTPEndpoint(server.Endpoint{
			Method:         "DELETE",
			Path:           "/expenses/{ID}",
			Endpoint:       serverEndpoints.DeleteEndpoint,
			RequestDecoder: decodeDeleteRequest,
		}),
	)

	return opts
}

func decodeGetRequest(_ context.Context, r *http.Request) (request interface{}, err error) {
	req := &expenses.GetExpenseRequest{}

	httputil.DecodeURL(r, req)

	if err := json.NewDecoder(r.Body).Decode(&req); err != nil && err != io.EOF {
		return nil, err
	}

	return req, err
}

func decodeListRequest(_ context.Context, r *http.Request) (request interface{}, err error) {
	req := &expenses.ListExpenseRequest{}

	httputil.DecodeURL(r, req)

	if err := json.NewDecoder(r.Body).Decode(&req); err != nil && err != io.EOF {
		return nil, err
	}

	return req, err
}

func decodeCreateRequest(_ context.Context, r *http.Request) (request interface{}, err error) {
	req := &expenses.CreateExpenseRequest{}

	httputil.DecodeURL(r, req)

	if err := json.NewDecoder(r.Body).Decode(&req); err != nil && err != io.EOF {
		return nil, err
	}

	return req, err
}

func decodeUpdateRequest(_ context.Context, r *http.Request) (request interface{}, err error) {
	req := &expenses.UpdateExpenseRequest{}

	httputil.DecodeURL(r, req)

	if err := json.NewDecoder(r.Body).Decode(&req); err != nil && err != io.EOF {
		return nil, err
	}

	return req, err
}

func decodeDeleteRequest(_ context.Context, r *http.Request) (request interface{}, err error) {
	req := &expenses.DeleteExpenseRequest{}

	httputil.DecodeURL(r, req)

	if err := json.NewDecoder(r.Body).Decode(&req); err != nil && err != io.EOF {
		return nil, err
	}

	return req, err
}
